/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    void countleaves(TreeNode* root1, vector <int> &a1)
    {
        if(!root1) return;
        if (!root1->left && !root1->right) // no left or right child node
        {
            a1.push_back(root1->val);
            return;
        }
        countleaves(root1->left, a1); // Recursive call for left sub-tree
        countleaves(root1->right, a1); // Recursive call for right sub-tree
    }
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        vector <int> v1, v2;
        countleaves(root1, v1);
        countleaves(root2, v2);
        return (v1 == v2);
    }
};
