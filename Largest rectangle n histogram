class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
      int n = heights.size();
       vector<int> left(n),right(n);
       stack<int> st;
       for(int i=0;i<n;++i)
       {
           if(st.empty())
               {left[i]=0;st.push(i);} 
            else{
                while(!st.empty() && heights[st.top()]>=heights[i])
                   { st.pop();}
                if(st.empty())  left[i]=0;
                else left[i] = st.top()+1;
                st.push(i);
            }
       }
       while(!st.empty())
            st.pop();

        for(int i=n-1;i>=0;--i){
            if(st.empty()) 
            {right[i]=n-1;st.push(i);}
            else{
                while(!st.empty() && heights[st.top()]>=heights[i])
                    st.pop();
                if(st.empty())  right[i]=n-1;
                else right[i]= st.top()-1;
                st.push(i);
            }
        }
        int mx_area=0;
        for(int i =0;i<n;i++){
            mx_area=max(mx_area,heights[i]*(right[i]-left[i]+1));
        }
        return mx_area;
    }
       
    };
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       //i tried this my first attempt and i am pretty impressed with it .
       //passed 25% test case .
       /* int maxHeight = 0;
        int tempHeight = 0;
        for(int i =0;i<heights.size()-1;i++)
        {
            if(heights[i]==heights[i+1])
            {
                maxHeight=heights[i]+heights[i+1];
            }
            if(heights[i]>heights[i+1])
            {
                tempHeight = heights[i];
                if(maxHeight<tempHeight)
                    {
                        maxHeight = tempHeight;
                    }
            }
            else if(heights[i]<heights[i+1])
            {
                tempHeight = 2*heights[i];
                if(maxHeight<tempHeight)
                    {
                        maxHeight = tempHeight;
                    }
            }
        }
        if(heights[heights.size()-1]>maxHeight)
        {
            maxHeight = heights[heights.size()-1];
        }
        return maxHeight;*/
    
