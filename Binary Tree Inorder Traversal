/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void IterativeInorder(TreeNode* root, vector<int>& ans)
    {
        stack<TreeNode*> s;
        TreeNode* curr= root;
        while(curr!=nullptr || s.empty()==false)
        {
            while(curr!=nullptr)
            {
                s.push(curr);
                curr=curr->left;
            }
            curr=s.top();
            s.pop();
            ans.push_back(curr->val);
            curr=curr->right;
        }
    } 
    /*void inorder(TreeNode* root, vector<int> &ans)
    {                   //Recursion used
        if(!root)   return;

        inorder(root->left,ans);
        ans.push_back(root->val);
        inorder(root->right,ans);
    }*/
    vector<int> inorderTraversal(TreeNode* root) {
        TreeNode* curr = root;
        vector<int> ans;
        IterativeInorder(root,ans);

        return ans;

    }
};
