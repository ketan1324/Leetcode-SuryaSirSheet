/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void StackPreOrder(TreeNode* root, vector<int>& ans)
    {
        if(!root) return ;
        stack<TreeNode*> s;
        
        s.push(root);
        while(s.empty()==false)
        {
            TreeNode* curr=s.top();
            ans.push_back(curr->val);
            s.pop();
            if(curr->right){
                s.push(curr->right);
            }
            if(curr->left){
                s.push(curr->left);
            }

        }
    }
    /*//Recursion
    void PreOrder(TreeNode* root, vector<int>& ans)
    {
        TreeNode* curr=root;
        if(!root)   return;
        ans.push_back(curr->val);
        PreOrder(curr->left,ans);
        PreOrder(curr->right,ans);
    }*/
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> ans;
        StackPreOrder(root,ans);
        return ans;
    }
};
