/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        vector<int> ans;
        queue<TreeNode*> q;
        q.push(root);
       if(root==nullptr)return ans;
        int size=0;
        
        while(1)
        {
            size=q.size();
            if(size==0)return ans;
            int data;
            while(size!=0)
            {
                TreeNode* curr = q.front();
                q.pop();
                data = curr->val;
                if(curr->left)
                {
                    q.push(curr->left);
                    
                }
                if(curr->right)
                {
                    q.push(curr->right);
                    
                }
                size--;
            }
            ans.push_back(data);
        }
        return ans;












        
        /*vector<int> ans;
        queue<TreeNode*> q;
        q.push(root);
        if(root==NULL)return ans;
        while(1)
        {
            int size=q.size();
            if(size==0)return ans;
            int data;
            while(size>0)
            {
                TreeNode* temp = q.front();
                q.pop();
                data= temp->val;
                if(temp->left)  q.push(temp->left);
                if(temp->right)  q.push(temp->right);
                size--;
            }
            ans.push_back(data);

        }
        return ans;*/
    }
};
