/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void SwapNode(TreeNode*& root)
    {
        TreeNode* temp = root;
        if(!root->left && !root->right)return;
        if(root->left &&root->right)
        {
            temp=root->left;
            root->left=root->right;
            root->right=temp;
        }
        else if(root->left && !root->right)
        {
            root->right=root->left;
            root->left=nullptr;
        }
        else if(!root->left && root->right) 
        {
            root->left=root->right;
            root->right=nullptr;
        }
        if(root->left)SwapNode(root->left);
        if(root->right)SwapNode(root->right);
    }
    
    TreeNode* invertTree(TreeNode* root) {
        if(!root)return root;
        SwapNode(root);
        return root;
    }
};
